<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[phillc - Phillip Campbell]]></title>
  <link href="http://phillc.com/atom.xml" rel="self"/>
  <link href="http://phillc.com/"/>
  <updated>2014-07-28T11:31:18-04:00</updated>
  <id>http://phillc.com/</id>
  <author>
    <name><![CDATA[Phillip Campbell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Frameworks]]></title>
    <link href="http://phillc.com/blog/2013/08/15/javascript-frameworks/"/>
    <updated>2013-08-15T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2013/08/15/javascript-frameworks</id>
    <content type="html"><![CDATA[<p>Back in March, the company I work for was creating a small app and were trying to decide which javascript frame work to use. There was an email chain debating which framework to use. I finally responded, and today a coworker convinced me to post that email:</p>

<hr />

<p>Was debating if I wanted to take the bait, but I love to argue, so I couldn&rsquo;t resist.</p>

<p>I am not a fan of pushing the entire rendering process to the client. I am also no longer a fan of client side routing (hash nor push state). It isn&rsquo;t about CPU power, and browser capabilities. I&rsquo;ve used the first six frameworks in todomvc.com and a couple of the others, and the way I grade them is by their testability, maintainability, and productivity. Also to say, I am a big fan of modularization, which can be interpreted as numerous small single purpose apps.</p>

<p>My opinions on the big 4 frameworks:</p>

<h3>Backbone</h3>

<p>I love backbone. So easy to get started. So easy to do whatever I want. However, I have a hard time believing that it can be scaled to a team size without some hard core discipline, and structure.</p>

<p>Backbone models and collections are freaking awesome, out of all client side frameworks I have dealt with, dealing with data is absolutely the easiest in Backbone. However, it is quickly negated by its shitty controllers/routers/ViewModel layer (if you haven&rsquo;t heard of a ViewModel, I think you should look up the MVVM - model view view/mode pattern). Backbone intentionally leaves this to you. I&rsquo;ve browsed a lot of random open source projects on github that use backbone and everywhere I look there is a different way to organize things, and it feels chaotic. If you value the same things about code as I do, that is testability, modularity, readability, etc, you have to come up with your own scheme that hopefully fits all your needs. Backbone&rsquo;s intentional shortcomings are picked up by some frameworks that are built on top of it, like Marionnette&hellip; but man I hate frameworks on frameworks.</p>

<p>Finally the view. Not the view you know of from rails, I&rsquo;ll call that the template. The view object. I don&rsquo;t mind how they bind data or events, but ugh, the lack of templating kills me. You have to compile your own template (not a big deal, jquery and underscore provide decent templating functions), and inject that into DOM via some helper methods (Urghhh). So if you have a collection, and render a list, then behind the scenes modify a model/the collection, you have to go delete your own element and replace it in the right spot. I found it manageable until I rendered a form, and tried to modify the same view with some view changes, and it became hell.</p>

<h3>Angular</h3>

<p>My first attempts at angular were thwarted by horrific documentation, and my second attempt was painful because they were in progress of updating their horrific documentation to actually document the version they released. Oh and (at the time) an incredibly intimidating dependency injection strategy. They have matured and now the documentation isn&rsquo;t completely rubbish and the dependency injection thing actually makes sense. I am currently using angular for my side project.</p>

<p>Angular is painfully verbose. They provide a dependency injection framework that has you declaring random variables everywhere with eye blistering $ signs (I guess that is because I usually use coffeescript these days). However, I am a big fan of DI, and out of all the frameworks, I believe Angular is the only one that really tries to solve such a problem.</p>

<p>Another awesome thing about angular is it is designed to be able to be tested from the ground up. Even with the angular documentation was shit, I gave angular those attempts because they actually tested their own code with a massive test suite, and showed you how to use it, and it looked half decent. You will be surprised how many projects in the javascript community (well, any open source community really) that become popular don&rsquo;t even have a unit test suite, or a really pointless shitty one (<em>cough</em> meteor <em>cough</em>). Part of being testable is being modular, and angular skews that axis very high.</p>

<p>Angular provides no model layer&hellip; it lets you use any plain old javascript object. A freedom, but given that is was so opinionated every where else (or rather, provided structure every where else), this is a let down.</p>

<p>My last point is the way that angular binds its data. This has been an internal battle for me for quite some time; data and event binding via pseudo html attributes vs declared event observers and interpolation. They are very different styles. I wouldn&rsquo;t necessarily choose a framework because of how they bind events, but there are some tradeoffs that I have seen some highly philosophical and argumentative developers will fight over, but I&rsquo;m not going to get into that here.</p>

<h3>Ember</h3>

<p>Now that ember has successfully separated its image from sprout, I think ember is very solid. Solid models/events, solid and high profile team behind it, solid (IMHO) way to declare templates, sensible view models, not bad collections. The only thing keeping me from constantly using ember js is its tight integration with handlebars (my use case for these frameworks don&rsquo;t align with that kind of templating, I&rsquo;ll explain in a sec).</p>

<h3>Knockout</h3>

<p>Last time I tried knockout, it felt like they were cramming ajax down my throat&hellip; they seem much better about that now. It has an awkward and sometimes ridiculously verbose ways of doing things. Was built by microsoft, the inventors of MVVM&hellip; was built by microsoft so I don&rsquo;t give it a serious look.</p>

<h3>Here are some random thoughts:</h3>

<p>I&rsquo;m done with client side routing for a while, it is annoying to deal with. You have to intercept all links, and redirect it back to your own router. You have to make sure that if you fill out a form, go to another page, come back to the form that the form is emptied. If one page breaks you may have just made the user stuck without any kind of indication that they are used to. You have to basically reinvent http status codes. Github can&rsquo;t even get it right (if you hit the back button too fast while browsing code, you can end up on a page different from what is in your url bar. This happens to me all the time and annoys the crap out of me.) With pushstate you have to make sure every page works if you hit the refresh button.</p>

<p>Rendering html has been solved before, and optimized. Think about all the compression web severs do, think about how browsers do progressive loading. Think about how in our ajax world we had to reinvent so many things (spinners, status codes, etc.)</p>

<p>On my current side project I chose angular. There is only one reason I chose it over the others, and that is because of how it binds data/events. I don&rsquo;t know about you, but I love haml/jade. The way I like to work when I have a scenario where I have dynamic client views is to have the server do as much rendering as possible, and then provide a template for whatever needs to be dynamic. This means using haml/jade on the server, and then feeding that into the templating mechanism of my mvvm framework. The syntax of handlebars is not easily compatible with any whitespace based markup language. With angular I can have the server side compile jade, and leave in the data binding syntax of angular.</p>

<p>like this (jade):</p>

<pre><code>p(class=") foo  #{baz}
</code></pre>

<p>If baz was a variable set to &ldquo;qux&rdquo; on the server, that would compile to</p>

<pre><code>&lt;p class="&gt;foo  qux&lt;/p&gt;
</code></pre>

<p>and then angular would pick those  up later for templating.</p>

<p>This fits well with my two of my three favorite features in rails; forms and routes.</p>

<p>form_for is such a time saver in my opinion, and I miss rails routes every time I try something that isn&rsquo;t rails. With this scheme in a rails environment, you get to use your form_for or your *_path methods on the server, then let the client do work after. I have gotten this to work before, I don&rsquo;t remember exactly, but I believe you can trick rails into taking odd parameters into url helpers&hellip;</p>

<p>if this were my haml:</p>

<pre><code>%p= post_path("")
</code></pre>

<p>and you had post declared as a resource, you would get</p>

<pre><code>&lt;p&gt;/posts/&lt;/p&gt;
</code></pre>

<p>which can be fed into a templating engine. I think you can do the same with form_for and stuff too.</p>

<p>However, my choices are for my personal side project, where I know where everything is&hellip; have to remember that different factors come into play when you are in a team.</p>

<p>K, I&rsquo;m done rambling&hellip; I didn&rsquo;t even get into testability, but whatever.</p>

<hr />

<p>Fast forward to today. We use hamlc + Backbone.js + marionette, and jasmine. Looks like github finally fixed their back button problem. My url_for trick doesn&rsquo;t work with certain characters in certain versions of rails. I learned that angular is very ugly when trying to deal with events over sockets due to the lack of the model. Backbone is painful with relational data (especially many to many).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presentation on continuous delivery]]></title>
    <link href="http://phillc.com/blog/2013/04/18/presentation-on-continuous-delivery/"/>
    <updated>2013-04-18T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2013/04/18/presentation-on-continuous-delivery</id>
    <content type="html"><![CDATA[<p><a href="http://phillc-cd.meteor.com/">This presentation</a> was built with <a href="https://github.com/phillc/meteor-impress">meteor-impress</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm not really a focused writer]]></title>
    <link href="http://phillc.com/blog/2012/03/31/im-not-really-a-focused-writer/"/>
    <updated>2012-03-31T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2012/03/31/im-not-really-a-focused-writer</id>
    <content type="html"><![CDATA[<p>So follow me on <a href="http://twitter.com/phillc">twitter</a> or <a href="http://github.com/phillc">github</a> instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decided to move my blog to posterous.]]></title>
    <link href="http://phillc.com/blog/2012/01/20/decided-to-move-my-blog-to-posterous/"/>
    <updated>2012-01-20T00:00:00-05:00</updated>
    <id>http://phillc.com/blog/2012/01/20/decided-to-move-my-blog-to-posterous</id>
    <content type="html"><![CDATA[<p>Seems like I have a hard time being motivated enough to write anything down. There is definitely some overhead in writing my own blog, which is why I moved away from my custom Django blog. From there I have tried a bunch of static site generators powered by git/github (like nanoc, jekyll and webgen). I think switching to a tool that I don’t have to maintain and has features like mobile compatibility or email posting might tip me over the edge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v8 scons error]]></title>
    <link href="http://phillc.com/blog/2010/06/06/v8-js-ubuntu-scons-error/"/>
    <updated>2010-06-06T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2010/06/06/v8-js-ubuntu-scons-error</id>
    <content type="html"><![CDATA[<p>While trying to install Google v8, I had an error:</p>

<pre><code>v8-read-only$ scons
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
g++ -o obj/release/api.o -c -Wall -Werror -W -Wno-unused-parameter -Wnon-virtual-dtor -pedantic -m32 -O3 -fomit-frame-pointer -fdata-sections -ffunction-sections -ansi -fno-rtti -fno-exceptions -fvisibility=hidden -Wall -Werror -W -Wno-unused-parameter -Wnon-virtual-dtor -pedantic -m32 -O3 -fomit-frame-pointer -fdata-sections -ffunction-sections -ansi -DV8_TARGET_ARCH_IA32 -DENABLE_VMSTATE_TRACKING -DENABLE_LOGGING_AND_PROFILING -DENABLE_DEBUGGER_SUPPORT -Isrc src/api.cc
cc1plus: warnings being treated as errors
src/handles-inl.h: In static member function 'static void v8::V8::RemoveMessageListeners(void (*)(v8::Handle&lt;v8::Message&gt;, v8::Handle&lt;v8::Value&gt;))':
src/handles-inl.h:50: error: dereferencing pointer '&lt;anonymous&gt;' does break strict-aliasing rules
src/handles-inl.h:50: error: dereferencing pointer '&lt;anonymous&gt;' does break strict-aliasing rules
src/utils.h:739: note: initialized from here
cc1plus: error: dereferencing pointer 'dest' does break strict-aliasing rules
cc1plus: error: dereferencing pointer 'dest' does break strict-aliasing rules
cc1plus: error: dereferencing pointer 'dest' does break strict-aliasing rules
cc1plus: error: dereferencing pointer 'dest' does break strict-aliasing rules
src/api.cc:3767: note: initialized from here
scons: *** [obj/release/api.o] Error 1
scons: building terminated because of error
</code></pre>

<p>Solved by using export GCC_VERSION=44, before running scons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript State Machine]]></title>
    <link href="http://phillc.com/blog/2009/10/14/javascript-state-machine/"/>
    <updated>2009-10-14T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2009/10/14/javascript-state-machine</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/phillc/Javascript-State-Machine">I wrote a simple Javascript State Machine.</a></p>

<p>It is intended for keeping track of what the current state is for my heavy AJAX app at work.</p>

<p>I also learned a lot about OO in javascript without using jQuery or the prototype framework, by using prototypes. I wanted to do that so that it would be framework independent.</p>

<p>Below is a simple example of how I use the state machine, and shows a bit of how I connected it with <a href="http://code.google.com/p/reallysimplehistory/">Really Simple History</a></p>

<p>I have included in this example some comments to show my thinking throughout, and perhaps how to use it.</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StateMachine</span><span class="p">();</span>
<span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">states</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">Begin</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">enter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// do some animation</span>
        <span class="p">},</span>
        <span class="nx">exit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// hide some stuff</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">Page</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">enter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// show some page</span>
        <span class="p">},</span>
        <span class="nx">exit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// hide it</span>
        <span class="p">},</span>
        <span class="nx">change</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">){</span>
            <span class="c1">// example of some event</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">change_page</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
            <span class="c1">// events can call events</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">(</span><span class="s1">&#39;setURL&#39;</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="nx">setURL</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">//example of how I integrate with really simple history</span>
            <span class="nx">dhtmlHistory</span><span class="p">.</span><span class="nx">add</span><span class="p">([</span><span class="s1">&#39;pages&#39;</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">current_page</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// These are some call backs I used for debugging with firebug to ensure</span>
<span class="c1">// that events were firing</span>
<span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">beforeEvent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;begin event: &#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">afterEvent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;end event: &#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">beforeStateChange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;begin state change to: &#39;</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="s1">&#39; from: &#39;</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>

    <span class="c1">// as an example of intercepting, I can stop a state from changing by returning false</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">to</span> <span class="o">==</span> <span class="s1">&#39;Page&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">blocker</span> <span class="o">==</span> <span class="s1">&#39;Page&#39;</span><span class="p">){</span>
        <span class="c1">// some logic</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">Site</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">afterStateChange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;end state change to: &#39;</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="s1">&#39; from: &#39;</span><span class="p">,</span> <span class="nx">from</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// The actual defenition. Instance vars can be set in it.</span>
<span class="kd">function</span> <span class="nx">Site</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">pages</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Page</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// global scope, so that it can be accessed globally (as it wouldn&#39;t normally</span>
<span class="c1">// be because the scope that I actually instantiate it inside prorotype&#39;s window onload)</span>
<span class="kd">var</span> <span class="nx">Davis</span><span class="p">;</span> 


<span class="c1">// Once again, just an example of how I integrate it with Really Simple History</span>
<span class="kd">function</span> <span class="nx">historyChange</span><span class="p">(</span><span class="nx">newLocation</span><span class="p">,</span> <span class="nx">historyData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">newLocation</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">newState</span> <span class="o">=</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">shift</span><span class="p">().</span><span class="nx">capitalize</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">newState</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">newState</span> <span class="o">=</span> <span class="s1">&#39;Begin&#39;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">Davis</span><span class="p">.</span><span class="nx">changeState</span><span class="p">(</span><span class="nx">newState</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">hash</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">Davis</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// This window observe for onload is prototype specific... But you can achieve the same other ways.</span>
<span class="nx">Event</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Davis</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Site</span><span class="p">();</span> <span class="c1">// my requirements need me to initialize after load</span>

    <span class="c1">// Really Simple History stuff</span>
    <span class="nx">dhtmlHistory</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">historyChange</span><span class="p">);</span>
    <span class="nx">historyChange</span><span class="p">(</span><span class="nx">dhtmlHistory</span><span class="p">.</span><span class="nx">currentLocation</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
<span class="p">});</span></code></pre></div>


<p>While implementing this, I also learned a bit about bookmarking and enabling the back button of ajax states. Really Simple History has worked ok for me, but it has some quirks&hellip; some of which I haven&rsquo;t solved yet (especially in IE) and those bugs may be above.</p>

<p>I also got my first dose of unit testing in javascript&hellip; and found some really cool library to assist in the development called <a href="http://newjs.rubyforge.org/">newjs</a> . However, at the time of this writing, the unit tests are not up to the current code, as a lot has changed&hellip; I will deal with that later.</p>

<p>Anyway, while my implementation surely isn&rsquo;t the best in the world, I hope someone can find use from it.</p>

<p><a href="http://github.com/phillc/Javascript-State-Machine">http://github.com/phillc/Javascript-State-Machine</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby multi-dimensional array helper]]></title>
    <link href="http://phillc.com/blog/2009/08/28/ruby-multi-dimensional-array-helper/"/>
    <updated>2009-08-28T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2009/08/28/ruby-multi-dimensional-array-helper</id>
    <content type="html"><![CDATA[<p>I needed something to help me get through a multi-dimensional array. So I extended the Array class.</p>

<p>Grab expects an array of coordinates.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">grab</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
    <span class="n">value</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">grab</span><span class="p">(</span><span class="n">position</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="n">position</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">empty?</span>
    <span class="n">value</span>
  <span class="k">rescue</span> <span class="no">NoMethodError</span>
    <span class="k">raise</span><span class="p">(</span><span class="no">IndexError</span><span class="p">,</span> <span class="s2">&quot;Multi Dimensional Array not deep enough&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>Then I can do this:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;asdf&quot;</span><span class="p">,</span><span class="o">[[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="o">]</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]].</span><span class="n">grab</span><span class="p">(</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">11</span>
<span class="o">&gt;&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;asdf&quot;</span><span class="p">,</span><span class="o">[[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="o">]</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]].</span><span class="n">grab</span><span class="p">(</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">33</span>
<span class="o">&gt;&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;asdf&quot;</span><span class="p">,</span><span class="o">[[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="o">]</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]].</span><span class="n">grab</span><span class="p">(</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;asdf&quot;</span><span class="p">,</span><span class="o">[[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="o">]</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]].</span><span class="n">grab</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="ss">IndexError</span><span class="p">:</span> <span class="no">Not</span> <span class="n">an</span> <span class="n">array</span><span class="o">.</span>
    <span class="n">from</span> <span class="sr">/Users/</span><span class="n">phillip</span><span class="o">/</span><span class="no">Desktop</span><span class="o">/</span><span class="n">rworkspace</span><span class="o">/</span><span class="n">davisbrandcapital</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">tagging</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">73</span><span class="ss">:in</span> <span class="sb">`grab&#39;</span>
<span class="sb">   from (irb):64</span>
<span class="sb">&gt;&gt; [[1,2,3],&quot;asdf&quot;,[[11,22,33],5,6,7]].grab([1])</span>
<span class="sb">=&gt; &quot;asdf&quot;</span>
<span class="sb">&gt;&gt;</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber with Selenium and Authlogic]]></title>
    <link href="http://phillc.com/blog/2009/08/19/cucumber-selenium-and-authlogic/"/>
    <updated>2009-08-19T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2009/08/19/cucumber-selenium-and-authlogic</id>
    <content type="html"><![CDATA[<p>I had some Issues with cucumber/selenium working properly with authlogic. After much searching, I&rsquo;ve figured out how to get it all to work properly.</p>

<p>I would get an error like:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">When I follow <span class="s2">&quot;Manage pages&quot;</span>                          <span class="c"># features/step_definitions/webrat_steps.rb:19</span>
  ed out after 5000ms <span class="o">(</span>Selenium::CommandError<span class="o">)</span>
  /opt/local/lib/ruby/1.8/timeout.rb:62:in <span class="sb">`</span>timeout<span class="s1">&#39;</span>
<span class="s1">  /opt/local/lib/ruby/1.8/timeout.rb:93:in `timeout&#39;</span>
  <span class="o">(</span><span class="nb">eval</span><span class="o">)</span>:2:in <span class="sb">`</span>/^I follow <span class="s2">&quot;([^\&quot;]*)&quot;</span><span class="nv">$/</span><span class="s1">&#39;</span>
<span class="s1">  features/plain/admin_page.feature:8:in `When I follow &quot;Manage pages&quot;&#39;</span></code></pre></div>


<p>Initially, to setup authlogic to work with regular webrat tests, I had to put the following in my env.rb:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;authlogic/test_case&quot;</span>

<span class="no">Before</span> <span class="k">do</span>
  <span class="n">activate_authlogic</span>
<span class="k">end</span></code></pre></div>


<p>After getting it working with webrat, I decided I wanted to test some of my javascript and AJAX with selenium, so I followed <a href="http://wiki.github.com/aslakhellesoy/cucumber/setting-up-selenium">this guide</a></p>

<p>The database_cleaner gem had to be added because you can&rsquo;t use</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Cucumber</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">use_transactional_fixtures</span></code></pre></div>


<p>with selenium, so it had to be removed from the env.rb and placed in the plain.rb. As a result, this ended up in my enhanced.rb</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;database_cleaner&#39;</span>
  <span class="no">Before</span> <span class="k">do</span>
    <span class="c1"># truncate your tables here, since you can&#39;t use transactional fixtures*</span>
    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
  <span class="k">end</span></code></pre></div>


<p>and this ended up in my plain.rb</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;database_cleaner&#39;</span>
<span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
<span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span></code></pre></div>


<p>Originally, I had it just in my enhanced.rb as an After block instead of Before, but after further contemplation, I realized that if something goes terribly wrong with the selenium tests, then the database would have bad data in it&hellip; So might as well clean it before hand.</p>

<p>Finally, my problem with authlogic + seleniu, was how I wrote my test. The way it was erroring out made it look like something completely different (the selenium timeout error), but after I watched it a couple times closely, I determined that the test was being sent to the next page before the &ldquo;button press&rdquo; was executed.</p>

<p>Here is the beginning of my test that failed:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">Scenario</span><span class="p">:</span> <span class="no">Visit</span> <span class="no">Add</span> <span class="no">Page</span> <span class="n">page</span>
    <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">logged</span> <span class="k">in</span>
    <span class="no">And</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="s2">&quot;the admin page&quot;</span>
    <span class="no">When</span> <span class="n">I</span> <span class="n">follow</span> <span class="s2">&quot;Manage pages&quot;</span>
    <span class="no">And</span> <span class="n">I</span> <span class="n">follow</span> <span class="s2">&quot;New Page&quot;</span></code></pre></div>


<p>With a little help from <a href="http://stackoverflow.com/questions/966052/cucumber-selenium-fails-randomly/966998#966998">a post on stack overflow</a>, I got it to work with the following:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">user</span>
  <span class="vi">@user</span> <span class="o">||=</span> <span class="no">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">login</span>
  <span class="n">user</span>
  <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> 
  <span class="n">fill_in</span> <span class="s2">&quot;Password&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span>
  <span class="n">click_button</span> <span class="s2">&quot;Login&quot;</span>

  <span class="c1"># This is what was added</span>
  <span class="k">if</span> <span class="no">Webrat</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">mode</span> <span class="o">==</span> <span class="ss">:selenium</span>
    <span class="n">selenium</span><span class="o">.</span><span class="n">wait_for_page_to_load</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Given</span> <span class="sr">/^I am logged out$/</span> <span class="k">do</span>
  <span class="vi">@current_user_session</span><span class="o">.</span><span class="n">destroy</span> <span class="k">if</span> <span class="vi">@current_user_session</span>
<span class="k">end</span>

<span class="no">Given</span> <span class="sr">/^I am logged in$/</span> <span class="k">do</span>
  <span class="n">visit</span> <span class="n">path_to</span><span class="p">(</span><span class="s2">&quot;the login page&quot;</span><span class="p">)</span>
  <span class="n">login</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^I login$/</span> <span class="k">do</span>
  <span class="n">login</span>
<span class="k">end</span></code></pre></div>


<p>Notice I had to add the if selenium line in order to get it to work in webrat.</p>

<p>Something tells me there is a better way to do it&hellip; probably overriding the click_button method when selenium is loaded&hellip; but I don&rsquo;t know it well enough quite yet to venture that far, I&rsquo;ll probably try it soon though.</p>

<p>Edit: oh, its a thing with webrat&hellip; but installing the newest version didn&rsquo;t fix it for me, then I actually read the <a href="https://webrat.lighthouseapp.com/projects/10503/tickets/226-not-waiting-for-page-load-with-selenium">ticket&hellip;</a> I&rsquo;ll stick with my current solution for now.</p>

<p>Edit2: Actually the issue is in the visit method, if you can believe that. click_button works fine, as it waits for the page to load before clicking, but the visit method is sent so fast, that because of the way my test is set up, we are sent to the next page either before the login button is pressed, or before the request gets a chance to process&hellip; I don&rsquo;t feel like investigating which one it exactly is, because the solution is the same&hellip; wait for the next page to load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[e-Text Editor]]></title>
    <link href="http://phillc.com/blog/2009/08/18/e-text-editor/"/>
    <updated>2009-08-18T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2009/08/18/e-text-editor</id>
    <content type="html"><![CDATA[<p>Was attempting to compile e-text editor on ubuntu 9.10 (yea yea, I know&hellip; my right to complain about broken packages disappears since its alpha) just to try it out, but had a sick number of errors ranging from &ldquo;Cannot compile wxWidgets&rdquo; to &ldquo;Cannot compile WebKit&rdquo;.</p>

<p>Finally, after trying multiple ways of compiling wxWidgets, I figured out the real error was</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">&quot;./include/wx/gsocket.h:40: error: using typedef-name ‘GSocket’ after ‘class’&quot;</span></code></pre></div>


<p>So I applied a patch I found at <a href="http://trac.wxwidgets.org/ticket/10883">http://trac.wxwidgets.org/ticket/10883</a> to the wxwidgets folder. and it suddenly worked.</p>

<p>edit: I turned out that I also had to update glib. glib version 2.20 did it for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xServer xorg.conf for 4850 X2 dual monitor - Ubuntu 9.04]]></title>
    <link href="http://phillc.com/blog/2009/06/16/xserver-xorgconf-4850-x2-dual-monitor/"/>
    <updated>2009-06-16T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2009/06/16/xserver-xorgconf-4850-x2-dual-monitor</id>
    <content type="html"><![CDATA[<p>Thanks to <a href="http://blog.morrigan.ch/?p=52">gwydion</a></p>

<p>I got my xorg.conf to finally work in Ubunutu 9.04 Jaunty. I was having problems where when I boot into ubuntu, I didn&rsquo;t even get a login screen, it just froze at a black screen after boot up with a few artifacts of color here and there.</p>

<p>Took many, many hours trying to finding this solution. I ended up being able to use the proprietary driver fglrx when all was said and done, instead of having to use vesa.</p>

<p>Here is what I did:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">dpkg-reconfigure xserver-xorg
aticonfig --initial -f --adapter<span class="o">=</span>all
aticonfig --cfa --adapater<span class="o">=</span>all
aticonfig --add-pairmode<span class="o">=</span>&lt;your width&gt;x&lt;your height&gt;+&lt;your width 2&gt;x&lt;your height 2&gt;</code></pre></div>


<p>Also had to add</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Option <span class="s2">&quot;EnableRandR12&quot;</span> <span class="s2">&quot;false&quot;</span></code></pre></div>


<p>to each device section and</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">EnableRandR12</span><span class="o">=</span>Sfalse</code></pre></div>


<p>to the [AMDPCSROOT/SYSTEM/DDX] section of /etc/ati/amdpcsdb (<a href="http://ubuntuforums.org/showthread.php?p=7144148">source</a>) in order to disable RandR 1.2</p>

<p>xorg.conf</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># xorg.conf (X.Org X Window System server configuration file)</span>
<span class="c">#</span>
<span class="c"># This file was generated by dexconf, the Debian X Configuration tool, using</span>
<span class="c"># values from the debconf database.</span>
<span class="c">#</span>
<span class="c"># Edit this file with caution, and see the xorg.conf manual page.</span>
<span class="c"># (Type &quot;man xorg.conf&quot; at the shell prompt.)</span>
<span class="c">#</span>
<span class="c"># This file is automatically updated on xserver-xorg package upgrades *only*</span>
<span class="c"># if it has not been modified since the last upgrade of the xserver-xorg</span>
<span class="c"># package.</span>
<span class="c">#</span>
<span class="c"># Note that some configuration settings that could be done previously</span>
<span class="c"># in this file, now are automatically configured by the server and settings</span>
<span class="c"># here are ignored.</span>
<span class="c">#</span>
<span class="c"># If you have edited this file but would like it to be automatically updated</span>
<span class="c"># again, run the following command:</span>
<span class="c">#   sudo dpkg-reconfigure -phigh xserver-xorg</span>

Section <span class="s2">&quot;ServerLayout&quot;</span>
    Identifier     <span class="s2">&quot;aticonfig Layout&quot;</span>
    Screen      <span class="m">0</span>  <span class="s2">&quot;aticonfig-Screen[0]-0&quot;</span> <span class="m">0</span> 0
    Screen         <span class="s2">&quot;aticonfig-Screen[1]-0&quot;</span><span class="c"># RightOf &quot;aticonfig-Screen[0]-0&quot;</span>
EndSection

Section <span class="s2">&quot;Files&quot;</span>
EndSection

Section <span class="s2">&quot;Module&quot;</span>
EndSection

Section <span class="s2">&quot;Monitor&quot;</span>
    Identifier   <span class="s2">&quot;aticonfig-Monitor[0]-0&quot;</span>
    Option      <span class="s2">&quot;VendorName&quot;</span> <span class="s2">&quot;ATI Proprietary Driver&quot;</span>
    Option      <span class="s2">&quot;ModelName&quot;</span> <span class="s2">&quot;Generic Autodetecting Monitor&quot;</span>
    Option      <span class="s2">&quot;DPMS&quot;</span> <span class="s2">&quot;true&quot;</span>
    HorizSync   30-82
    VertRefresh  56-76
EndSection

Section <span class="s2">&quot;Monitor&quot;</span>
    Identifier   <span class="s2">&quot;aticonfig-Monitor[1]-0&quot;</span>
    Option      <span class="s2">&quot;VendorName&quot;</span> <span class="s2">&quot;ATI Proprietary Driver&quot;</span>
    Option      <span class="s2">&quot;ModelName&quot;</span> <span class="s2">&quot;Generic Autodetecting Monitor&quot;</span>
    Option      <span class="s2">&quot;DPMS&quot;</span> <span class="s2">&quot;true&quot;</span>
    HorizSync   30-82
    VertRefresh  50-75
EndSection

Section <span class="s2">&quot;Device&quot;</span>
    Identifier  <span class="s2">&quot;aticonfig-Device[0]-0&quot;</span>
    Driver      <span class="s2">&quot;fglrx&quot;</span>
    Option      <span class="s2">&quot;EnableRandR12&quot;</span> <span class="s2">&quot;false&quot;</span>
    Option      <span class="s2">&quot;PairModes&quot;</span> <span class="s2">&quot;1680x1050+1280x1024&quot;</span>
    BusID       <span class="s2">&quot;PCI:3:0:0&quot;</span>
    Option          <span class="s2">&quot;XAANoOffscreenPixmaps&quot;</span>
EndSection

Section <span class="s2">&quot;Device&quot;</span>
    Identifier  <span class="s2">&quot;aticonfig-Device[1]-0&quot;</span>
    Driver      <span class="s2">&quot;fglrx&quot;</span>
    Option      <span class="s2">&quot;EnableRandR12&quot;</span> <span class="s2">&quot;false&quot;</span>
    BusID       <span class="s2">&quot;PCI:4:0:0&quot;</span>
    Option          <span class="s2">&quot;XAANoOffscreenPixmaps&quot;</span>
EndSection

Section <span class="s2">&quot;Screen&quot;</span>
    Identifier <span class="s2">&quot;aticonfig-Screen[0]-0&quot;</span>
    Device     <span class="s2">&quot;aticonfig-Device[0]-0&quot;</span>
    Monitor    <span class="s2">&quot;aticonfig-Monitor[0]-0&quot;</span>
    DefaultDepth     24
    SubSection <span class="s2">&quot;Display&quot;</span>
        Viewport   <span class="m">0</span> 0
        Depth     24
        Modes      <span class="s2">&quot;1680x1050_75.00&quot;</span>
    EndSubSection
EndSection

Section <span class="s2">&quot;Screen&quot;</span>
    Identifier <span class="s2">&quot;aticonfig-Screen[1]-0&quot;</span>
    Device     <span class="s2">&quot;aticonfig-Device[1]-0&quot;</span>
    Monitor    <span class="s2">&quot;aticonfig-Monitor[1]-0&quot;</span>
    DefaultDepth     24
    SubSection <span class="s2">&quot;Display&quot;</span>
        Viewport   <span class="m">0</span> 0
        Depth     24
        Modes      <span class="s2">&quot;1280x1024_75.00&quot;</span>
    EndSubSection
EndSection</code></pre></div>


<p>This probably is a solution for the 4870 X2, or any other X2 based board.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic static media folder]]></title>
    <link href="http://phillc.com/blog/2008/09/19/automatic-static-media-folder/"/>
    <updated>2008-09-19T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2008/09/19/automatic-static-media-folder</id>
    <content type="html"><![CDATA[<p>Added another shortcut&hellip;
I had a config variable in my settings_local file to specify where the media folder was in order to have django static serve it.</p>

<p>This is much easier.</p>

<p>urls.py:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">DEBUG</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">os</span>
    <span class="n">media_root</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PROJECT_ROOT</span><span class="p">,</span> <span class="s">&#39;media&#39;</span><span class="p">)</span>
    <span class="n">urlpatterns</span> <span class="o">+=</span> <span class="n">patterns</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
        <span class="p">(</span><span class="s">r&#39;^media/(?P&lt;path&gt;.*)$&#39;</span><span class="p">,</span> <span class="s">&#39;django.views.static.serve&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;document_root&#39;</span><span class="p">:</span> <span class="n">media_root</span><span class="p">}),</span>
    <span class="p">)</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structure inside a project]]></title>
    <link href="http://phillc.com/blog/2008/07/08/structure-inside-project/"/>
    <updated>2008-07-08T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2008/07/08/structure-inside-project</id>
    <content type="html"><![CDATA[<p>A common problem I have had is that too much work was required when I needed to deploy my django project, or if i needed to work on the project on another computer. Subversion has been my friend, but part of the problem is the necessary local settings in each of the projects.</p>

<p>In addition to the overall structure between all my projects, I have developed a few tricks to make handling things inside of a project much easier.</p>

<p>Previously, my template folder and my media folder were in different parent directories. This caused me to need to change several variables in the settings.py (or my <a href="http://kapsh.com/blog/2008/jul/05/making-django-version-control-friendly/">settings_local.py</a>) of django in each environment that it existed in. However I no longer have to do that.</p>

<p>Inside my settings.py I have this:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
<span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
<span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PROJECT_ROOT</span><span class="p">,</span> <span class="s">&#39;apps&#39;</span><span class="p">))</span></code></pre></div>


<p>The first two lines figure out the directory that the settings.py lives in
The third line inserts my apps folder to the python path (this works great with my <a href="http://kapsh.com/blog/2008/jul/01/developed-directory-structure/">django directory structure</a>)</p>

<p>Now, the next step for me was to move my template and media directories around. My directory structure for a project is as follows:</p>

<p>-project<br/>
&ndash;media <br/>
&mdash;css  <br/>
&mdash;js   <br/>
&mdash;images<br/>
&ndash;templates<br/>
&mdash;application template directory 1<br/>
&mdash;application template directory 2<br/>
&mdash;base.html                       <br/>
&ndash;apps                             <br/>
&mdash;app1                            <br/>
&mdash;app2                            <br/>
&ndash;settings.py                      <br/>
&ndash;settings_local.py</p>

<p>So as you can see, my templates folder is in the same directory as my settings.py. My media folder is too. In order to avoid making this a variable too:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">MEDIA_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PROJECT_ROOT</span><span class="p">,</span> <span class="s">&#39;media&#39;</span><span class="p">)</span>

<span class="n">TEMPLATE_DIRS</span> <span class="o">=</span> <span class="p">(</span>
     <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">PROJECT_ROOT</span><span class="p">,</span> <span class="s">&#39;templates&#39;</span><span class="p">),</span>
<span class="p">)</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developed Directory Structure]]></title>
    <link href="http://phillc.com/blog/2008/07/07/developed-directory-structure/"/>
    <updated>2008-07-07T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2008/07/07/developed-directory-structure</id>
    <content type="html"><![CDATA[<p>Over the course of my web development life, I have changed my work flow and directory structure many times. Each time gets a little bit better, but I doubt I will ever finish modifying it, as I am always learning new techniques.</p>

<p>I am presently using <a href="http://www.djangoproject.com">Django</a> in all of my projects, both at work and as a hobby. Django&rsquo;s ability to easily reuse applications has mad me change my directory structure several time. Finally, I do believe I have settled.</p>

<p>First thing to know, is that both at work and in my pet projects, I am hosting multiple websites on the same apache instance. This is simply because the load behind the website does not justify buying a new slice (I use <a href="http://www.slicehost.com">slicehost</a> for my hosting needs).</p>

<p>I also make use of several available applications out there, <a href="http://code.google.com/p/django-comment-utils/">django comment utils</a>, <a href="http://code.google.com/p/django-tagging/">django tagging</a>, and <a href="http://code.google.com/p/django-registration/">django-registration</a> just to name a few (all/most are findable through <a href="http://djangoplugables.com/">django pluggables</a>)</p>

<p>So that being said, I need to have a directory structure capable of handling each one of my projects, all of my own shared applications, and all of the downloaded applications.</p>

<p>Here is what I have come up with.</p>

<ul>
<li><p>projects/<br/>
&ndash; project 1/<br/>
&mdash; apps/    <br/>
&mdash;- non reusable app 1/<br/>
&mdash;- non reusable app 2/<br/>
&ndash; project 2/           <br/>
&ndash; project 3/           <br/>
&mdash;apps                 <br/>
&mdash;- non reusable app 3/</p></li>
<li><p>common/<br/>
&ndash; self made reusable app 1/<br/>
&ndash; self made reusable app 2/</p></li>
<li><p>external/<br/>
&ndash; grabbed reusable app 1/<br/>
&ndash; grabbed reusable app 2/<br/>
&ndash; grabbed reusable app 3/</p></li>
</ul>


<p>Basically, the idea being that I store my projects in the projects folder, with applications made just for that project in the project&rsquo;s application folder.</p>

<p>I put applications that I build that will be used by more than one project into the common folder.</p>

<p>Applications that I have grabbed from other people (comment_utils, tagging, etc) into the external folder.</p>

<p>Then for each virtual host, I add to the python path the projects folder, then reference settings by projectname.settings (from observation, django adds the folder where the settings file is to the python path itsself), and the common folder and the external folder. I also add the projects, external, and common folders to the python path inside of conf file.</p>

<p>That works for apache, but then to get manage.py to work (it doesn&rsquo;t work because none of the python paths are set for it), I edit &ldquo;/etc/environment&rdquo; and add the line</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s2">&quot;/home/username/projects:/home/username/common:/home/username/external&quot;</span></code></pre></div>


<p>Bingo, now manage.py works.</p>

<p>Now, any time I want to add a new project, I do not have a ton of hassle trying to get the project&rsquo;s manage.py to work, and all my virtual hosts in apache have the same structure!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Django Projects Version Control Friendly]]></title>
    <link href="http://phillc.com/blog/2008/07/05/making-django-version-control-friendly/"/>
    <updated>2008-07-05T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2008/07/05/making-django-version-control-friendly</id>
    <content type="html"><![CDATA[<p>Subversion has been my friend ever since I learned about it. However, it took me a while to figure out how to deal with configuration files. For Django, this specifically relates to the settings.py.</p>

<p>Django projects can end up on many different environments. Putting settings.py into source control directly will cause our settings to migrate across all working copies. This is not reasonable, as not every person will have the same environment (not all using mysql, not all using the same directory).</p>

<p>Removing settings.py from version control, and make a separate settings.py.template file that contains just the basic structure is a solution to that. However, it brings another problem: What if you want to change a used application or a middleware? You would then have to make that change on all working copies.</p>

<p>My solution has been to make a settings_local.py.dist</p>

<p>This file has variables in it like media path, database information, and caching options. You can copy these things straight out of the settings.py (and delete them from settings.py)</p>

<p>This file will go under version control.</p>

<p>Now, in your settings.py, add the line</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">settings_local</span> <span class="kn">import</span> <span class="o">*</span></code></pre></div>


<p>(I added the line to the very bottom of my settings.py)</p>

<p>So, now when a working copy of the project is grabbed, the person behind it can copy settings_local.py.dist to settings_local.py. Inside settings_local.py the environment&rsquo;s details are placed. This file will be ignored from version control.</p>

<p>With this setup, you can add an application or middle ware to settings.py for easy distributing through version control, and it will not affect a workspace&rsquo;s local variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purpose of this website]]></title>
    <link href="http://phillc.com/blog/2008/06/25/purpose-website/"/>
    <updated>2008-06-25T00:00:00-04:00</updated>
    <id>http://phillc.com/blog/2008/06/25/purpose-website</id>
    <content type="html"><![CDATA[<p>Over the course of my programming life, I have written some form of blog in perl, then php, then in a framework of php, then ruby on rails, and now Django.</p>

<p>The real purpose of this site is to get an understanding of every component that goes into a blog. This is without a doubt the best one I&rsquo;ve ever written, but the same could be said about each of the ones I built before at that time.</p>

<p>This website is built in Django, where I currently build most of my applications now.</p>

<p>In addition to the building of the blog, I decided that it is time for me to write some of my technical thoughts down.</p>

<p>Yes I like to share, discuss, and debate many technological things, however another purpose of this site is to store my docs so that I can grab them anywhere. Not real big things or private things, but things like, a step by step on server setup, so that I can copy paste my long apt-get install command, without trying to remember it from memory.</p>

<p>This serves that purpose well.</p>

<p>This blog is obviously not complete. I will finish it over time, but it does share the same code with another website, so any improvements will reflect on both.</p>
]]></content>
  </entry>
  
</feed>
